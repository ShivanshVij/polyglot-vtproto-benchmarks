// Code generated by polyglot v1.1.4, DO NOT EDIT.
// source: bench.proto

package benchmark

import (
	"errors"
	"github.com/loopholelabs/polyglot"
)

var (
	NilDecode = errors.New("cannot decode into a nil root struct")
)

type BytesData struct {
	Bytes []byte
}

func NewBytesData() *BytesData {
	return &BytesData{}
}

func (x *BytesData) Error(b *polyglot.Buffer, err error) {
	polyglot.Encoder(b).Error(err)
}

func (x *BytesData) Encode(b *polyglot.Buffer) {
	if x == nil {
		polyglot.Encoder(b).Nil()
	} else {

		polyglot.Encoder(b).Bytes(x.Bytes)
	}
}

func (x *BytesData) Decode(b []byte) error {
	if x == nil {
		return NilDecode
	}
	return x.decode(polyglot.Decoder(b))
}

func (x *BytesData) decode(d *polyglot.BufferDecoder) error {
	if d.Nil() {
		return nil
	}

	var err error

	x.Bytes, err = d.Bytes(x.Bytes)
	if err != nil {
		return err
	}
	return nil
}

type IntegerData struct {
	Integer int32
}

func NewIntegerData() *IntegerData {
	return &IntegerData{}
}

func (x *IntegerData) Error(b *polyglot.Buffer, err error) {
	polyglot.Encoder(b).Error(err)
}

func (x *IntegerData) Encode(b *polyglot.Buffer) {
	if x == nil {
		polyglot.Encoder(b).Nil()
	} else {

		polyglot.Encoder(b).Int32(x.Integer)
	}
}

func (x *IntegerData) Decode(b []byte) error {
	if x == nil {
		return NilDecode
	}
	return x.decode(polyglot.Decoder(b))
}

func (x *IntegerData) decode(d *polyglot.BufferDecoder) error {
	if d.Nil() {
		return nil
	}

	var err error

	x.Integer, err = d.Int32()
	if err != nil {
		return err
	}
	return nil
}
